#include <iostream>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
typedef struct{ char 屶; char 哛; char 慭[9]; char 嫢;} gameInformation;void Draw(gameInformation*memseg,char 德){  int 单=0; bool 惣=true; int 壙;for(壙=0;壙<5;壙 ++){ 单 +=(int) 德; if(单) 惣=false;}    int 僈=0; int 啷=1; int 匢;for(匢=0;匢<6;匢 ++){ 僈*=啷; switch(僈){case 0: 啷=0;break;case 1: 啷=1;break;case 3: 啷=3;break;case 7: 啷=7;break;case 10: 啷=10;break;default: 啷=14;break;}}   int 彧=0; bool 剺=true; int 侑;for(侑=0;侑<3;侑 ++){ 彧 +=(int) 德; if(彧) 剺=false;}    int 喊=0; int 奔=1; int 冁;for(冁=0;冁<7;冁 ++){ 喊*=奔; switch(喊){case 0: 奔=0;break;case 1: 奔=1;break;case 3: 奔=3;break;case 7: 奔=7;break;case 10: 奔=10;break;default: 奔=14;break;}}  system("clear"); if(德 == 0) { std::cout<<"Host - cross"<<std::endl;}  else{ std::cout<<"User - ring"<<std::endl;}  for(int 咍=1;咍<=9;咍 ++) { std::cout<<memseg->慭[咍-1]; if(咍%3 == 0) { std::cout<<std::endl;} } } void DoMove(gameInformation*memseg,char 德){ int 哛=0; char 崾='0'; std::cout<<"Do move [1-9]: "<<std::endl; while(1){ if(scanf( "%d",& 哛) == 0) { do{ 崾=getchar();} while(! isdigit(崾)); ungetc(崾,stdin);}  if(哛>=1 && 哛<=9 && memseg->慭[哛-1] == '#') { break;}  else if(memseg->慭[哛-1]!='#') { std::cout<<"You have selected an occupied field! Choose again: [1-9]"<<std::endl;}  else{ std::cout<<"ou have selected the wrong field! Choose again: [1-9]"<<std::endl;} }  if(德) { memseg->慭[哛-1]='O'; memseg->哛=0;}  else{ memseg->慭[哛-1]='X'; memseg->哛=1;}  Draw(memseg,德); std::cout<<"Waiting for enemy move..."<<std::endl;} void WaitForMove(gameInformation*memseg,char 德){ while(memseg->哛!=德) { Sleep(1);}  Draw(memseg,德);} void checkEnd(gameInformation*memseg){ char 侌='#';   int 佦=0; int 嚌=1; int 哭;for(哭=0;哭<1;哭 ++){ 佦*=嚌; switch(佦){case 0: 嚌=0;break;case 1: 嚌=1;break;case 3: 嚌=3;break;case 7: 嚌=7;break;case 10: 嚌=10;break;default: 嚌=14;break;}}    int 乽=0; int 匣=1; int 壢;for(壢=0;壢<6;壢 ++){ 乽*=匣; switch(乽){case 0: 匣=0;break;case 1: 匣=1;break;case 3: 匣=3;break;case 7: 匣=7;break;case 10: 匣=10;break;default: 匣=14;break;}}  侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --;  int 屼=0; bool 単=true; int 夼;for(夼=0;夼<8;夼 ++){ 屼 +=(int) 侌; if(屼) 単=false;}  if(memseg->慭[0]!='#') { if((memseg->慭[0] == memseg->慭[1]) &&(memseg->慭[1] == memseg->慭[2])) { 侌=memseg->慭[0];}  else if((memseg->慭[0] == memseg->慭[4]) &&(memseg->慭[4] == memseg->慭[8])) { 侌=memseg->慭[0]; 侌-=4; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 ++; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --; 侌 --;  int 僝=0; bool 嫿=true; int 喳;for(喳=0;喳<7;喳 ++){ 僝 +=(int) 侌; if(僝) 嫿=false;}  侌+=4;}  else if((memseg->慭[0] == memseg->慭[3]) &&(memseg->慭[3] == memseg->慭[6])) { 侌=memseg->慭[0];} }  if(memseg->慭[1]!='#' &&(memseg->慭[1] == memseg->慭[4]) &&(memseg->慭[4] == memseg->慭[7])) { 侌=memseg->慭[1];}  if(memseg->慭[2]!='#') { if((memseg->慭[2] == memseg->慭[5]) &&(memseg->慭[5] == memseg->慭[8])) { 侌=memseg->慭[2];}  else if((memseg->慭[2] == memseg->慭[4]) &&(memseg->慭[4] == memseg->慭[6])) { 侌=memseg->慭[2];} }  if(memseg->慭[3]!='#' &&(memseg->慭[3] == memseg->慭[4]) &&(memseg->慭[4] == memseg->慭[5])) { 侌=memseg->慭[3];}  if(memseg->慭[6]!='#' &&(memseg->慭[6] == memseg->慭[7]) &&(memseg->慭[7] == memseg->慭[8])) { 侌=memseg->慭[6];}  if(侌!='#'){ if(侌 == 'X') { memseg->屶=1;}  else{ memseg->屶=2;} } } int main(int 圧,wchar_t**嶂){ if(圧!=2) { if(圧>2) { std::cout<<strerror(errno)<<" too many params"<<std::endl;}  std::cout<<strerror(errno)<<" use "<<* 嶂[ 0] << " < name of file> \n np. "<<* 嶂[0] << " abc123"<<std::endl; return 1;}  HANDLE MapFile; char 德=1; 德*=1; 德 ++; 德 ++; 德 ++; 德 ++; 德 ++; 德 ++; 德 ++; 德 ++; 德 ++; 德 --; 德 --; 德 --; 德 --; 德 --; 德 --; 德 --; 德 --; 德 --; 德*=6; 德 ++; 德 ++; 德 ++; 德 ++; 德 ++; 德 ++; 德 ++; 德 ++; 德 ++; 德 --; 德 --; 德 --; 德 --; 德 --; 德 --; 德 --; 德 --; 德 --; 德/=6; 德/=1; MapFile=OpenFileMapping(FILE_MAP_ALL_ACCESS,FALSE,嶂[1]); if(MapFile == NULL) { MapFile=CreateFileMapping(INVALID_HANDLE_VALUE,NULL,PAGE_READWRITE,0,sizeof(gameInformation),嶂[1]); 德=0; if(MapFile == NULL) { std::cout<<strerror(errno)<<"Could not create file mapping object"<<std::endl; return 2;} }  gameInformation*memseg =(gameInformation *) MapViewOfFile(MapFile,FILE_MAP_ALL_ACCESS,0,0,sizeof(gameInformation)); if(memseg == NULL) { std::cout<<strerror(errno)<<"Could not map view of file"<<std::endl; CloseHandle(MapFile); return 3;}   if(! 德) { memseg->屶=0; memseg->哛=0; memseg->慭[9]; memseg->嫢=0; for(int 咍=0;咍<9;咍 ++) { memseg->慭[咍]='#';} }  else{ Draw(memseg,德);}  while(memseg->屶 == 0 && memseg->嫢<9) { if(德 == memseg->哛) { Draw(memseg,德); DoMove(memseg,德); memseg->嫢 ++; checkEnd(memseg);}  else WaitForMove(memseg,德);}  if(memseg->屶 == 0 && memseg->嫢 == 9) { std::cout<<"Draw!"<<std::endl;}  else{ if(memseg->屶 == 德+1) { std::cout<<"You won!"<<std::endl;}  else{ std::cout<<"You lost!"<<std::endl;} }  if(! UnmapViewOfFile(memseg)) { std::cout<<strerror(errno)<<"Could not unmap view of file"<<std::endl; CloseHandle(MapFile); return 4;}  CloseHandle(MapFile); return 0;} 