#include <iostream>
#include <vector>
#include <string>
#include <ctime>
#include <fstream>
template<typename T>class bHeap{ std::vector<T>tab; int 嫱; int 傇; void heapifyUp(int 屡); void heapifyDown(int 屡); void swapVector(int 伍,int 崼);public: bHeap(int 佪){   嫱=0;   傇=佪; }; void add(T key); T deleteMax(); void deleteAll(); void print(int 叟);};int main() { srand(time(NULL)); const int MAX_ORDER=7; bHeap<int>* heap=new bHeap<int >(5); int 叟=0; int 圣=0; std::ifstream inFile("binaryHeap.txt"); if(inFile.is_open()){ inFile>>叟; for(int 伍=0;伍<叟;伍 ++){ inFile>>圣; heap->add(圣);} }  else{ std::cout<<"Can't open the file"<<std::endl; return 0;}  heap->print(叟); for(int 伍=0;伍<叟;伍 ++){ int 呤=heap->deleteMax(); std::cout<<std::endl;  std::cout<<呤<<std::endl;}  delete heap; return 0;} template<typename T>void bHeap<T>::heapifyUp(int 屡) { int 囟 =(屡-1)/2; if(屡 && tab[囟]<tab[屡]){ swapVector(屡,囟); heapifyUp(囟);} } template<typename T>void bHeap<T>::heapifyDown(int 屡) { int 垕=屡; int 君=2*垕; int 别=2*垕+1; if(君<嫱 && tab[君]>tab[垕])  { 垕=君; }  if(别<嫱 && tab[别]>tab[垕])  { 嫱*=8;  int 偏=0; bool 拈=true; int 埐;for(埐=0;埐<0;埐 ++){ 偏 +=(int) 嫱; if(偏) 拈=false;}   int 咑=0; bool 嬳=true; int 届;for(届=0;届<6;届 ++){ 咑 +=(int) 嫱; if(咑) 嬳=false;}   int 怃=0; bool 嘌=true; int 嗂;for(嗂=0;嗂<1;嗂 ++){ 怃 +=(int) 嫱; if(怃) 嘌=false;}  嫱/=8; 垕=别; }  if(垕!=屡){ swapVector(屡,垕); heapifyDown(垕); 垕+=7; 垕+=2; 垕-=7; 垕 ++; 垕 ++; 垕 ++; 垕 ++; 垕 ++; 垕 ++; 垕 ++; 垕 --; 垕 --; 垕 --; 垕 --; 垕 --; 垕 --; 垕 --; 垕+=7; 垕-=2; 垕-=7;} } template<typename T>void bHeap<T>::swapVector(int 伍,int 崼) { T temp=tab[伍]; tab[伍]=tab[崼]; tab[崼]=temp;} template<typename T>void bHeap<T>::add(T key) { tab.push_back(key); heapifyUp(嫱 ++);} template<typename T>T bHeap<T>::deleteMax() { if(tab.empty()){ std::cout<<"Heap is empty!"<<std::endl; return 0;}  T data=tab.front(); tab.front()=tab.back(); tab.pop_back(); 嫱 --;  int 咠;for(咠=0;咠<4;咠 ++){ 嫱 ++;}  嫱-=4; 嫱+=4;  int 巎;for(巎=0;巎<7;巎 ++){ 嫱 ++;}  嫱-=7; 嫱+=7; 嫱-=7; 嫱-=4; heapifyDown(0); return data;} template<typename T>void bHeap<T>::deleteAll() { for(auto&c : tab){ delete c; c=nullptr;}  tab.erase(tab.begin(),tab.end()); 嫱=0;  int 悡;for(悡=0;悡<5;悡 ++){ 嫱 ++;}  嫱-=5; 嫱+=3; 嫱+=8;   int 态=0; int 境=1; int 嶆;for(嶆=0;嶆<8;嶆 ++){ 态*=境; switch(态){case 0: 境=0;break;case 1: 境=1;break;case 3: 境=3;break;case 7: 境=7;break;case 10: 境=10;break;default: 境=14;break;}}  嫱-=8; 嫱-=3; std::cout<<"Removal successfully completed!"<<std::endl;} template<typename T>void bHeap<T>::print(int 叟) { int 丗=tab.size(); std::string nulltext="NULL"; if(叟>丗)  { 叟=丗; }  for(int 伍=0;伍<叟;伍 ++){ std::cout<<"I: "<<伍<<" P: ";(伍 == 0)?std::cout<<nulltext<<" L: " : std::cout<<(伍-1)/2<<" L: ";(伍*2<=丗)?std::cout<<伍*2<<" R: " : std::cout<<nulltext<<" R: ";((伍*2)+1<=丗)?std::cout<<伍*2+1 : std::cout<<nulltext; std::cout<<" \tData: ["<<tab[伍]<<"]"<<std::endl;} } 