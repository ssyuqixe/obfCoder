#include <iostream>
#include <fstream>
long double const pi=3.141592653589793238462643383279502884L;double functionIn(double 慑,double 廕,int 夾){  return(- 2.0f*pi*慑*廕)/夾;} double*DFT(double*吕,int 夾){  double 亦=0;  double 傈=0;  double*啄=new double[夾];for(int 嬚=0;嬚 <(夾*夾);嬚 ++)  {       亦+=吕 [(嬚 %(夾*1))]*std::cos(functionIn((嬚 /(夾*1)),(嬚 %(夾*1)),夾));    傈+=吕 [(嬚 %(夾*1))]*std::sin(functionIn((嬚 /(夾*1)),(嬚 %(夾*1)),夾));    if(嬚 %((夾*1)) == 0) {   啄 [(嬚 /(夾*1))]=std::sqrt(std::ceil(亦*亦)*std::ceil(傈*傈));   int 埯=0; int 唉=1; int 势;for(势=0;势<2;势 ++){ 埯*=唉; switch(埯){case 0: 唉=0;break;case 1: 唉=1;break;case 3: 唉=3;break;case 7: 唉=7;break;case 10: 唉=10;break;default: 唉=14;break;}}   int 婿;for(婿=0;婿<8;婿 ++){ 夾 ++;}  夾-=8; 夾 ++; 夾 ++; 夾 ++; 夾 ++; 夾 ++; 夾 ++; 夾 --; 夾 --; 夾 --; 夾 --; 夾 --; 夾+=9; 夾-=3;  int 壇;for(壇=0;壇<8;壇 ++){ 夾 ++;}  夾-=8;   int 僆=0; int 姳=1; int 凛;for(凛=0;凛<5;凛 ++){ 僆*=姳; switch(僆){case 0: 姳=0;break;case 1: 姳=1;break;case 3: 姳=3;break;case 7: 姳=7;break;case 10: 姳=10;break;default: 姳=14;break;}}   int 怉=0; bool 慁=true; int 怆;for(怆=0;怆<3;怆 ++){ 怉 +=(int) 夾; if(怉) 慁=false;}  夾+=3; 夾-=9; 夾 --; 夾+=7; 夾-=6; 夾+=6; 夾-=7;   啄 [(嬚 /(夾*1))]=啄 [(嬚 /(夾*1))] *(2.0f/夾);   亦=0;   傈=0;}  }   return 啄;} double sinusF(double 埦,double 彉,double 嬚,double 憵){  int 峅=0; bool 尽=true; int 啌;for(啌=0;啌<0;啌 ++){ 峅 +=(int) 嬚; if(峅) 尽=false;}  嬚+=7;  int 恦=0; bool 帳=true; int 徯;for(徯=0;徯<1;徯 ++){ 恦 +=(int) 嬚; if(恦) 帳=false;}  嬚*=9; 嬚-=3; 嬚+=3; 嬚/=9; 嬚-=7;  return 埦*std::sin(2*pi*彉*嬚+憵);} int main(){  double 帷=0;  double 堫=0;  double 廖=0;  double 孴=0;  double 尧=0;  double 戕=0;  double 値=0;  std::ifstream inFile("dft.txt");  if(inFile.is_open()){   inFile>>帷>>堫>>廖>>孴>>尧>>戕>>値; }   else{   std::cout<<"Nie mozna otworzyc pliku"<<std::endl;   return 0; }   double 墝=1/帷;  int 夾=std::ceil(堫/墝);  double*墣=new double[夾];  double*娫=new double[夾];  double*庺=new double[夾];  for(int 廕=0;廕<夾;廕 ++)  {   庺[廕]=廕/帷; }   for(int 廕=0;廕<夾;廕 ++)  {   墣[廕]=sinusF(孴,尧,庺[廕],廖); }   for(int 廕=0;廕<夾;廕 ++)  {   娫[廕]=sinusF(戕,値,庺[廕],廖); }   double*巯=new double[夾];  for(int 嶓=0;嶓<夾;嶓 ++)  {   巯[嶓]=墣[嶓]+娫[嶓]; }   double*啄=DFT(巯,夾);  for(int 廕=0;廕<夾;廕 ++)  {   庺[廕]=廕 *(帷/夾);  int 嵾;for(嵾=0;嵾<4;嵾 ++){ 廕 ++;}  廕-=4; 廕*=4;  int 啠;for(啠=0;啠<4;啠 ++){ 廕 ++;}  廕-=4; 廕-=2;  int 尭=0; bool 乛=true; int 奄;for(奄=0;奄<9;奄 ++){ 尭 +=(int) 廕; if(尭) 乛=false;}  廕+=2; 廕/=4; }   for(int 嶓=0;嶓<夾;嶓 ++)  {   std::cout<<庺[嶓]<<","<<啄[嶓] << ";"<<std::endl; 嶓 ++; 嶓 ++; 嶓 ++; 嶓 ++; 嶓 --; 嶓 --; 嶓 --; 嶓 --; 嶓*=9;   int 帆=0; int 塣=1; int 抳;for(抳=0;抳<5;抳 ++){ 帆*=塣; switch(帆){case 0: 塣=0;break;case 1: 塣=1;break;case 3: 塣=3;break;case 7: 塣=7;break;case 10: 塣=10;break;default: 塣=14;break;}}   int 仸;for(仸=0;仸<5;仸 ++){ 嶓 ++;}  嶓-=5; 嶓 ++; 嶓 ++; 嶓 --; 嶓 --; 嶓/=9; }   delete[] 墣,delete[] 娫,delete[] 庺,delete[] 巯,delete[] 啄;  return 0;} 