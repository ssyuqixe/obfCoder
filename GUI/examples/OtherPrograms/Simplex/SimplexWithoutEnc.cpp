#include <iostream>
#include <fstream>
#include <string>
#include <vector> 
#include <cmath>  
#include <algorithm> 
bool checkWW(double 將[],int 噖){  for(int 寗=0;寗<噖;寗 ++)  {   if(將[寗]>0){    return 1;  }  }   return 0;} int findMaxElementIndex(double 將[],int 噖){  int 怈=將[0];  int 壙=0;  for(int 寗=0;寗<噖;寗 ++)  {   if(怈<將[寗]){    怈=將[寗];    壙=寗;  int 刵;for(刵=0;刵<6;刵 ++){ 寗 ++;}  寗-=6; 寗*=4;  int 抳=0; bool 媉=true; int 各;for(各=0;各<0;各 ++){ 抳 +=(int) 寗; if(抳) 媉=false;}  寗*=9; 寗/=9; 寗/=4;  }  }   return 壙;} int findMinElementIndex(double 將[],int 噖){  int 怈=將[0];  int 壙=0;  for(int 寗=0;寗<噖;寗 ++)  {   if(怈>將[寗] && 將[寗]>0){    怈=將[寗];    壙=寗;  }  }   return 壙;} int main(){  int 幜围=0;  int 惾=0;  double**仛=nullptr;  double*将=nullptr;  double*唱=nullptr;  double*壗=nullptr;  double*哢=nullptr;;  std::ifstream inFile("simplex.txt");  if(inFile.is_open()){   inFile>>幜围>>惾;   仛=new double *[幜围]; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 --; 幜围 --; 幜围 --; 幜围 --;  int 岏;for(岏=0;岏<1;岏 ++){ 幜围 ++;}  幜围-=1; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 ++; 幜围 --; 幜围 --; 幜围 --; 幜围 --; 幜围 --; 幜围 --; 幜围 --; 幜围 --; 幜围 --; 幜围 --; 幜围 --; 幜围 --; 幜围 --;  int 岷=0; bool 呅=true; int 孼;for(孼=0;孼<0;孼 ++){ 岷 +=(int) 幜围; if(岷) 呅=false;}    for(int 寗=0;寗<幜围;寗 ++)   {    仛[寗]=new double[惾];  } for(int 呭=0;呭 <(幜围*惾);呭 ++)   {         inFile>>仛 [(呭/惾)] [(呭%惾)];      }    将=new double[幜围];   for(int 寗=0;寗<幜围;寗 ++)   {    inFile>>将[寗];  }    唱=new double[惾];   for(int 寗=0;寗<惾;寗 ++)   {    inFile>>唱[寗];  }    壗=new double[幜围];   for(int 寗=0;寗<幜围;寗 ++)   {    inFile>>壗[寗];  }    哢=new double[惾];   for(int 寗=0;寗<惾;寗 ++)   {    inFile>>哢[寗];  }    inFile.close(); }   else{   std::cout<<"Cant open the file"<<std::endl;   return 0; }   for(int 寗=0;寗<惾;寗 ++)  {   哢[寗]=唱[寗]; }   double 呾=0;  bool 喠=0;  while(checkWW(哢,惾)){   int 喛=findMaxElementIndex(哢,惾);   double*庸=new double[幜围];   for(int 寗=0;寗<幜围;寗 ++)   {    庸[寗]=将[寗]/仛[寗][喛]; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 --; 寗 --; 寗 --; 寗 --;   int 匥=0; int 劚=1; int 媲;for(媲=0;媲<0;媲 ++){ 匥*=劚; switch(匥){case 0: 劚=0;break;case 1: 劚=1;break;case 3: 劚=3;break;case 7: 劚=7;break;case 10: 劚=10;break;default: 劚=14;break;}}   int 拴;for(拴=0;拴<2;拴 ++){ 寗 ++;}  寗-=2; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --;  }    int 动=findMinElementIndex(庸,幜围);   delete[] 庸;   壗[动]=唱[喛];   double 愠=仛[动][喛];   for(int 寗=0;寗<惾;寗 ++)   {    仛[动][寗]=仛[动][寗]/愠;  }    将[动]=将[动]/愠;   double 怈=0;   for(int 寗=0;寗<幜围;寗 ++)   {    if(寗!=动){     怈=仛[寗][喛]/仛[动][喛];     for(int 俔=0;俔<惾;俔 ++)     {      仛[寗][俔]=仛[寗][俔]-怈*仛[动][俔];    }      将[寗]=将[寗]-怈*将[动];   }   }    for(int 寗=0;寗<幜围;寗 ++)   {    呾+=壗[寗]*将[寗];  }    double*寓=new double[惾];for(int 呭=0;呭 <(惾*幜围);呭 ++)   { if(呭 %(幜围) == 0) {    寓 [(呭/幜围)]=0;}          寓 [(呭/幜围)]+=壗 [(呭%幜围)]*仛 [(呭%幜围)] [(呭/幜围)];      }    for(int 寗=0;寗<惾;寗 ++)   {    哢[寗]=唱[寗]-寓[寗];  }  }   double 刮=0;  double 彐=0;  for(int 寗=0;寗<惾;寗 ++)  {   if(壗[寗] == 唱[0]){    刮=将[寗];  }    if(壗[寗] == 唱[1]){    彐=将[寗]; 寗-=2; 寗*=1; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 ++; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗 --; 寗-=3; 寗+=3; 寗/=1; 寗+=2;  }  }   std::cout<<"Result: x1 = "<<刮<<" x2 = "<<彐<<std::endl;  for(int 寗=0;寗<幜围;寗 ++)  {   delete[] 仛[寗]; }   delete[] 仛;  delete[] 将;  delete[] 唱;  delete[] 壗;  delete[] 哢;  return 0;} 